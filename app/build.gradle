plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id "com.cookpad.android.plugin.license-tools"
}

android {
    compileSdk 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "dev.kyokomi.todoapp"
        minSdk 26
        targetSdk 30
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                    "room.schemaLocation"  : "$projectDir/schemas".toString(),
                    "room.incremental"     : "true",
                    "room.expandProjection": "true"]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
        useIR = true
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
        kotlinCompilerVersion kotlin_version
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.5.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.1'
    implementation 'androidx.activity:activity-compose:1.3.0-beta02'

    implementation "com.google.android.material:compose-theme-adapter:$compose_version"
    implementation "androidx.navigation:navigation-compose:2.4.0-alpha03"

    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.ui:ui-tooling:$compose_version"
    implementation "androidx.compose.runtime:runtime-livedata:$compose_version"

    implementation "com.google.accompanist:accompanist-systemuicontroller:0.12.0"
    implementation "com.google.accompanist:accompanist-coil:0.11.1"

    // Room
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$room_version"
    // optional - Test helpers
    testImplementation "androidx.room:room-testing:$room_version"
    kapt "org.xerial:sqlite-jdbc:3.34.0"

    // hilt
    implementation "com.google.dagger:hilt-android:$dagger_version"
    kapt "com.google.dagger:hilt-compiler:$dagger_version"
    // For instrumentation tests
    androidTestImplementation "com.google.dagger:hilt-android-testing:$dagger_version"
    kaptAndroidTest "com.google.dagger:hilt-compiler:$dagger_version"
    // For local unit tests
    testImplementation "com.google.dagger:hilt-android-testing:$dagger_version"
    kaptTest "com.google.dagger:hilt-compiler:$dagger_version"
    implementation 'androidx.hilt:hilt-navigation-compose:1.0.0-alpha03'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
}

// https://issuetracker.google.com/issues/174695268#comment9
allprojects {
    configurations.all {
        resolutionStrategy {
            force 'org.xerial:sqlite-jdbc:3.34.0'
        }
    }
}

// Wrap html links in licenses.html
// https://github.com/cookpad/LicenseToolsPlugin/issues/2
// https://github.com/cookpad/license-tools-plugin/issues/74
task patchLicensePageStyles() {
    doLast {
        def licensesHTMLFile = new File(project.rootDir, "/app/src/main/assets/licenses.html")
        try {
            def additionalStyles = "    a { word-break: break-all; }"
            def licensesHTML = licensesHTMLFile.getText('UTF-8')
            licensesHTML = licensesHTML.replaceFirst(/(\s*<\/style>)/, "\n" + additionalStyles + "\$1")
            licensesHTMLFile.text = licensesHTML
        } catch(Exception e) {
            println e
        }
    }
}
generateLicensePage.finalizedBy(patchLicensePageStyles)